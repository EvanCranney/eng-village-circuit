REFLECTION

(1) EVALUATION OF SUCCESS

This implementation is successful in several ways. Firstly, it correctly
simulates tour group visits to Concurrencia as defined in the specification;
tour groups arrive via cable car, visit each village (one-by-one), and then
leave by the same cable car. Notably, only one group can occupy any given
train stop or train at any given time. This behaviour is accurately captured
by the simulation output. It can also be considered successful insofar
as the implementation is reasonably easy to understand due to it's
relative simplicity and potential extensibility (see (2) Design Decisions).

(2) CRITICAL DESIGN DECISIONS

  (a) Train Stop Interface - due to the fact that several classes of object
      have to function as train stops (e.g. CableCar, Village, Mountain),
      it was sensible to implement TrainStop as an interface. This was
      preferable to an abstract class for two reasons: firstly, the objects 
      that implement TrainStop are conceptually unrelated (e.g. CableCar and
      Village are not subtypes of some common parent); secondly, the
      implementations of the leave() and enter() methods vary substantially.
      Irrespective, the purpose is to allow for greater extensiblity of the
      simulation: new objects functioning as train stops can be added
      simply by adhering to the interface. 

  (b) Monitor/Thread Designation - as recommended in the specification,
      TrainStop classes have been implemented as monitors, and trains as
      threads. This was a service largely to the simplicity of the
      simulation: the alternative, treating trains as monitors and
      TrainStops as threads seemed to be unfaithful to the conception of
      stops as static, motionless objects, and trains as dynamic objects.
      Stops could also alternatively been implemented as semaphores to
      - for example - accomodate multiple groups in any one stop, but the
      extensibility that this would have granted did not seem to outweigh
      the extra complexity.

  (c) Implementation of CableCar - the most complex component of the
      simulation was implementing CableCar. This is because CableCar acts
      as both a train stop, and the point of contact for the group generator
      (Producer) and consumer (Consumer) in the simulation. An additonal
      flag was necessary to distinguish between groups at either the valley
      or terminus that have yet to go to the villages, and groups that
      have already been to the villages. Without this flag, groups that
      have just been generated by Producer can be immediately consumed by
      Consumer; groups can also indefinitely loop around villages, visiting
      them indefinitely. Adding the flag to CableCar  was favourable over
      the alternative - adding states to Group objects - because of its
      relative simplicity (in spite of, perhaps, greater extensibility).

(3) INSIGHTS FROM EXPERIMENTATION

  (a) Distinguishing Returning & Departing Groups - a naive implementation
      of CableCar (i.e. one which does not check whether groups) inside
      the car have already visited the villages or not - can result in the
      two problems described in (2)(c): groups may simply do repeated
      rounds of the villages, and never actually catch the cable car
      back into the valley; similarly, groups that are arrive in the
      valley may be immediately consumed (without visiting villages).
      Similarly, it can result in the operator sending the cable car
      to from the valley to the terminus (and then back) with the same
      tour group in it. Essentially, the simulation needs to be able
      to distinguish between returning and departing tour groups.

  (b) Potential Deadlock - if enough groups enter Concurrencia such that
      all villages and trains are occupied, and then a new group arrives
      (i.e. appears in the cable car), then the simulation hits deadlock.
      No group is to move from their current location, and the consumer will
      be unable to remove the group from the cable car (since it won't have
      "completed its visit"). To prevent this from occuring, we limit the
      number of groups allowed to enter the simulation to 2N+1, where N is
      the number of stops (villages, cable car).
